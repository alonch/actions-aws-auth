AWSTemplateFormatVersion: 2010-09-09
Description: >-
  actions-aws-webserver
Transform:
- AWS::Serverless-2016-10-31
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  SubnetA:
    Type: AWS::EC2::Subnet::Id
  SubnetB:
    Type: AWS::EC2::Subnet::Id
  DomainName:
    Type: String
  DomainHostedZoneId:
    Type: String
  SubDomainName:
    Type: String
    Default: api
  Image:
    Type: String
    # Update with the Docker image. "You can use images in the Docker Hub registry or specify other repositories (repository-url/image:tag)."
    Default: nginx:latest
  ContainerPort:
    Type: Number
    Default: 80
  LoadBalancerPort:
    Type: Number
    Default: 443
  HealthCheckPath:
    Type: String
    Default: /
  # for autoscaling
  MinContainers:
    Type: Number
    Default: 1
  # for autoscaling
  MaxContainers:
    Type: Number
    Default: 3
  # target CPU utilization (%)
  AutoScalingTargetValue:
    Type: Number
    Default: 90
Resources:
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${DomainName}
      DomainValidationOptions:
       - DomainName: !Sub ${DomainName}
         HostedZoneId: !Ref DomainHostedZoneId
      ValidationMethod: DNS
      SubjectAlternativeNames: 
      - !Sub "*.${DomainName}"
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Sub ${AWS::StackName}
      UserPoolTier: ESSENTIALS
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: False
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true # required for SAML auth
          Required: true
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      ManagedLoginVersion: 2
      UserPoolId: !Ref UserPool
      Domain: !Sub "auth.${DomainName}"
      CustomDomainConfig:
        CertificateArn: !Ref Certificate
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${AWS::StackName}
      GenerateSecret: true
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !Sub "https://${SubDomainName}.${DomainName}/oauth2/idpresponse"
      LogoutURLs:
        - "https://www.google.com"
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      SupportedIdentityProviders:
        - COGNITO

  UserPoolDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DomainHostedZoneId
      Name: !Sub "auth.${DomainName}."
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt UserPoolDomain.CloudFrontDistribution
        EvaluateTargetHealth: false
